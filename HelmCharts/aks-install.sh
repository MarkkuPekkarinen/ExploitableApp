#/bin/bash

uuid=$(cat /dev/urandom | env LC_CTYPE=C tr -dc 'a-z' | fold -w 6 | head -n 1)

function jq_check
{
    if hash jq 2>/dev/null; then
        echo "jq exists"
    else
        echo "install jq"
        exit 1
    fi
}

function watch_check
{
    if hash watch 2>/dev/null; then
        echo "watch exists"
    else
        echo "install watch"
        exit 1
    fi
}

function helm_check
{
    if hash helm 2>/dev/null; then
        echo "helm exists"
    else
        echo "install helm"
        exit 1
    fi
}

function kubectl_check
{
    if hash kubectl 2>/dev/null; then
        echo "kubectl exists"
    else
        echo "install kubectl"
        exit 1
    fi
}

function azcli_check
{
    if hash az 2>/dev/null; then
        echo "azure cli exists"
    else
        echo "install azure cli"
        exit 1
    fi
}

####################################################
#Check for Tools
####################################################
azcli_check
kubectl_check
helm_check
watch_check
jq_check

####################################################
#Azure Login
####################################################
az login

####################################################
#Info Dump
####################################################
echo "################################################################################################################"
echo "################################################################################################################"
echo ""
echo "The cluster is now being created for you and this can take several minutes, so sit back and relax."
echo "After the cluster is created the helm charts will be deployed and you will be given a URL that will be"
echo "hosting your application."
echo ""
echo "################################################################################################################"
echo "################################################################################################################"


####################################################
#AKS Initialization
####################################################

RESOURCE_GROUP="Exploitable-App-Temporary"
CLUSTER_NAME="tempCluster"

#Create a resource group for simplified cleanup
az group create --name $RESOURCE_GROUP -l eastus

#Create a Kubernetes cluster for hosting our application
az aks create --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --node-count 1 --node-vm-size Standard_B2s --kubernetes-version 1.15.11 --enable-addons http_application_routing --generate-ssh-keys > cluster-info.tmp.json 
cat cluster-info.tmp.json #screen dump
domain=$(cat cluster-info.tmp.json | jq ".addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName" | sed -e 's/"//g')
rm cluster-info.tmp.json
echo "You will soon be able to reach your site @ https://$domain"

#Get the Kubernetes credentials so that we can use kubectl
az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME

#Create the cert manager so that we can connect later w/ https
kubectl create namespace cert-manager
kubectl label namespace cert-manager certmanager.k8s.io/disable-validation="true"
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.8.1/cert-manager.yaml

#Let the cluster stabilize
while true; do if echo "$(kubectl get pods --all-namespaces | grep '0/1\|0/2')" | grep -q "0/1\|0/2"; then echo "Waiting on pods (10s)"; sleep 10s; else break; fi; done

#Create out namespace fot the app
kubectl create namespace exploitable

#See the cluster-issuer.yaml file in this directory for more details, this is the lets encrypt stuff that gives us a cert for https
kubectl apply -f cluster-issuer.yaml

#Guacamole for the Administration of the System
helm install $(echo "guac-$uuid")  ./charts/guacamole/ --set hostName=$(echo "$domain") --namespace exploitable

#Deploy the Exploitable App
helm install exploitable-ingress stable/nginx-ingress --set rbac.create=true --namespace exploitable
helm install $(echo "db-$uuid") ./charts/db/ --set fullnameOverride=$(echo "db-$uuid") --namespace exploitable
helm install $(echo "redis-$uuid") ./charts/redis/ --set fullnameOverride=$(echo "redis-$uuid") --namespace exploitable
helm install $(echo "exploitableapp-ws-$uuid") ./charts/exploitableappwebservice/ \
  --set fullnameOverride=$(echo "svc-$uuid") \
  --set dbServer=$(echo "db-$uuid") \
  --set redisServer=$(echo "redis-$uuid") \
  --set webServer=$(echo "web-$uuid") \
  --set webServiceServer=$(echo "svc-$uuid") \
  --set postgresHostName=$(echo "guac-$uuid-postgres") \
  --namespace exploitable
helm install $(echo "exploitableapp-$uuid") ./charts/exploitableapp/ \
  --set ingress.hosts={$(echo "$domain")} \
  --set fullnameOverride=$(echo "web-$uuid") \
  --set dbServer=$(echo "db-$uuid") \
  --set redisServer=$(echo "redis-$uuid") \
  --set webServer=$(echo "web-$uuid") \
  --set webServiceServer=$(echo "svc-$uuid") \
  --set flag=$(echo "flag-$uuid") \
  --set ingress.azureapprouting=$(if echo "$domain" | grep -q "aksapp"; then echo "true"; else echo "false"; fi;) \
  --namespace exploitable

####################################################
#Info Dump
####################################################
echo "################################################################################################################"
echo "################################################################################################################"
echo ""
echo "You will soon be able to reach your site @ https://$domain"
echo "It may take a few minutes for the certs to be created so no worries if it warns you about the certs right away"
echo ""
echo "** Press 'Enter' to watch the pod creation live"
echo "** Once all pods are in a 'Running' state you should be able to access the url above."
echo ""
echo "################################################################################################################"
echo "################################################################################################################"
read

####################################################
#Watch Pods
####################################################
watch kubectl get all --namespace exploitable

####################################################
#Wait on Input
####################################################
echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
echo ""
echo "Press 'Enter' to tear it all down and exit"
echo ""
echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
read

####################################################
#AKS Cleanup
####################################################
az group delete --name $RESOURCE_GROUP