#!/bin/bash

uuid=$(cat /dev/urandom | env LC_CTYPE=C tr -dc 'a-z' | fold -w 6 | head -n 1)

function install_jq_if_needed
{
    if hash jq 2>/dev/null; then
        echo "jq exists"
    else
        if hash yum 2>/dev/null; then
			sudo yum install -y epel-release
            sudo yum install -y jq
        else
            if hash apt 2>/dev/null; then
                sudo apt update
                sudo apt install -y jq
            else
                echo "yum & apt is missing"
            fi    
        fi
    fi
}

function install_watch_if_needed
{
    if hash watch 2>/dev/null; then
        echo "watch exists"
    else
        if hash yum 2>/dev/null; then
			sudo yum install -y epel-release
            sudo yum install -y watch
        else
            if hash apt 2>/dev/null; then
                sudo apt update
                sudo apt install -y watch
            else
                echo "yum & apt is missing"
            fi    
        fi
    fi
}

function install_helm_if_needed
{
    if hash helm 2>/dev/null; then
        echo "helm exists"
    else
        if hash yum 2>/dev/null; then
			sudo yum install -y epel-release
            sudo yum install -y helm
        else
            if hash apt 2>/dev/null; then
                sudo apt update
                sudo apt install -y helm
            else
                echo "yum & apt is missing"
            fi    
        fi
    fi
}

function install_kubectl_if_needed
{
    if hash kubectl 2>/dev/null; then
        echo "kubectl exists"
    else
        if hash yum 2>/dev/null; then
			sudo yum install -y epel-release
            sudo yum install -y kubectl
        else
            if hash apt 2>/dev/null; then
                sudo apt update
                sudo apt install -y kubectl
            else
                echo "yum & apt is missing"
            fi    
        fi
    fi
}

function remove_charts
{
    #kubectl delete -f https://github.com/jetstack/cert-manager/releases/download/v0.8.1/cert-manager.yaml
	#kubectl delete -f cluster-issuer.yaml --namespace exploitable
	
	helm list --namespace exploitable --output json | jq '.Releases[].Name' | tr -d '"' | while read x; do helm del --purge $x; done
	#kubectl delete all --all --namespace exploitable
	#kubectl delete secrets --all --namespace exploitable

	#helm del --purge gitlab
	#kubectl delete all -l release=elastic --namespace logs
	#kubectl delete pvc -l release=elastic --namespace logs
	#kubectl delete secrets -l release=elastic --namespace logs
	#kubectl delete all -l release=gitlab --namespace gitlab
	#kubectl delete pvc -l release=gitlab --namespace gitlab
	#kubectl delete secrets -l release=gitlab --namespace gitlab
	#while true; do if echo "$(kubectl get pods --all-namespaces | grep 'Terminating')" | grep -q "Terminating"; then echo "Waiting on pods to Terminate (10s)"; sleep 10s; else break; fi; done
}

####################################################
#Check Params
####################################################
if [ "$#" -ne 1 ]; then
	#domain='attlocal.net'
	echo "You must provide a base domain:"
	echo "EXAMPLE 1: XYZ123.eastus.aksapp.io"
	echo "EXAMPLE 2: attlocal.net"
	echo "EXAMPLE 3: local"
    echo "EXAMPLE 4: exploitable.app"
	exit
else
	if [[ "$1" == *"aksapp.io"* ]]; then
		domain=$1	
	else
		domain=$(echo "$uuid.$1")
	fi
fi

####################################################
#Install needed tools
####################################################
install_kubectl_if_needed
install_helm_if_needed
install_jq_if_needed
install_watch_if_needed

####################################################
#Wait on Input
####################################################
echo "Press 'Enter' to Continue"
read

####################################################
#Remove Old Charts
####################################################
#remove_charts

####################################################
#Add Charts
####################################################

#Create exploitable namespace
kubectl create namespace exploitable

#Cert Manager
#kubectl create namespace cert-manager
#kubectl label namespace cert-manager certmanager.k8s.io/disable-validation="true"
#kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.8.1/cert-manager.yaml
#while true; do if echo "$(kubectl get pods --all-namespaces | grep '0/1\|0/2')" | grep -q "0/1\|0/2"; then echo "Waiting on pods (10s)"; sleep 10s; else break; fi; done
#kubectl apply -f cluster-issuer.yaml --namespace exploitable

#Guacamole
helm install $(echo "guac-$uuid")  ./charts/guacamole/ --set hostName=$(echo "$domain") --namespace exploitable

#Exploitable App
helm install exploitable-ingress stable/nginx-ingress --set rbac.create=true --namespace exploitable
helm install $(echo "db-$uuid") ./charts/db/ --set fullnameOverride=$(echo "db-$uuid") --namespace exploitable
helm install $(echo "redis-$uuid") ./charts/redis/ --set fullnameOverride=$(echo "redis-$uuid") --namespace exploitable
helm install $(echo "exploitableapp-ws-$uuid") ./charts/exploitableappwebservice/ \
  --set fullnameOverride=$(echo "svc-$uuid") \
  --set dbServer=$(echo "db-$uuid") \
  --set redisServer=$(echo "redis-$uuid") \
  --set webServer=$(echo "web-$uuid") \
  --set webServiceServer=$(echo "svc-$uuid") \
  --set postgresHostName=$(echo "guac-$uuid-postgres") \
  --namespace exploitable
helm install $(echo "exploitableapp-$uuid") ./charts/exploitableapp/ \
  --set ingress.hosts={$(echo "$domain")} \
  --set fullnameOverride=$(echo "web-$uuid") \
  --set dbServer=$(echo "db-$uuid") \
  --set redisServer=$(echo "redis-$uuid") \
  --set webServer=$(echo "web-$uuid") \
  --set webServiceServer=$(echo "svc-$uuid") \
  --set flag=$(echo "flag-$uuid") \
  --set ingress.azureapprouting=$(if echo "$domain" | grep -q "aksapp"; then echo "true"; else echo "false"; fi;) \
  --namespace exploitable

#Elastic Stack
#helm install elastic stable/elastic-stack \
#  --set fluent-bit.enabled=true \
#  --set fluent-bit.backend.forward.port=24220 \
#  --set fluent-bit.backend.forward.host=elastic-fluentd \
#  --set fluent-bit.backend.es.host=elastic-elasticsearch-client \
#  --set fluentd.enabled=true \
#  --set fluentd-elasticsearch.enabled=true \
#  --set fluentd-elasticsearch.elasticsearch.host='elastic-elasticsearch-client' \
#  --namespace logs
#kubectl patch configmap/elastic-kibana --namespace logs --type merge -p '"data": { "kibana.yml": "elasticsearch.url: http://elastic-elasticsearch-client:9200\nserver.host: \"0\"\nserver.name: elastic-kibana\n" }'
#helm install elastic-patch ./charts/elastic/ --namespace logs

#Gitlab
#helm repo add gitlab https://charts.gitlab.io/
#helm repo update
#helm upgrade --install gitlab gitlab/gitlab --namespace gitlab --timeout 600 \
#  --set global.edition=ce \
#  --set global.hosts.domain=$domain \
#  --set certmanager-issuer.email=me@exploitable.app
#kubectl get secret gitlab-gitlab-initial-root-password -ojsonpath='{.data.password}' --namespace gitlab | base64 --decode ; echo

####################################################
#Wait on Input
####################################################
echo "Press 'Enter' to Continue"
read

####################################################
#Watch Pods
####################################################
watch kubectl get all --namespace exploitable

####################################################
#Remove Charts
####################################################
#remove_charts


####################################################
#AKS Setup
####################################################
#az login
#az group create --name Temporary -l eastus
#az aks create --resource-group Temporary --name tempCluster --node-count 1 --node-vm-size Standard_B2s --kubernetes-version 1.14.7 --enable-addons http_application_routing --generate-ssh-keys
#az aks get-credentials --resource-group Temporary --name tempCluster
#kubectl create namespace cert-manager
#kubectl label namespace cert-manager certmanager.k8s.io/disable-validation="true"
#kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.8.1/cert-manager.yaml
#while true; do if echo "$(kubectl get pods --all-namespaces | grep '0/1\|0/2')" | grep -q "0/1\|0/2"; then echo "Waiting on pods (10s)"; sleep 10s; else break; fi; done
#kubectl create namespace exploitable
#kubectl apply -f cluster-issuer.yaml
#./InstallCharts.sh

####################################################
#AKS Cleanup
####################################################
#az group delete --name Temporary
